package com.dashotel.hotelmanagement.controller.mail;

import com.dashotel.hotelmanagement.dto.response.ApiResponse;
import com.dashotel.hotelmanagement.service.other.EmailService;
import com.dashotel.hotelmanagement.service.other.OtpService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/otp")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class OtpController {
    OtpService otpService;
    EmailService emailService;

    @PostMapping("/send")
    public ApiResponse<String> sendOtp(@RequestParam String email) {

        if(!emailService.isValidEmail(email)) {
            return ApiResponse.<String>builder()
                    .code(HttpStatus.BAD_REQUEST.value())
                    .result("Email kh√¥ng h·ª£p l·ªá!.")
                    .build();
        }

        String key = "OTP: " + email;

        if(!otpService.canSendOtpAgain(key)) {
            return ApiResponse.<String>builder()
                    .code(HttpStatus.BAD_REQUEST.value())
                    .result("OTP v·∫´n c√≤n hi·ªáu l·ª±c ho·∫∑c ch∆∞a h·∫øt th·ªùi gian.")
                    .build();
        }

        String otp = otpService.generateOTP(key);

        String subject = "üè® DAS_Hotels | X√°c Nh·∫≠n M√£ OTP C·ªßa B·∫°n! üîê";

        String text = "üöÄ M√£ OTP C·ªßa B·∫°n ƒê√£ ƒê∆∞·ª£c T·∫°o!\n\n" +
                "Xin ch√†o,\n\n" +
                "ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª• t·∫°i DAS_Hotels, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi:\n\n" +
                "M√£ OTP: " + otp + "\n\n" +
                "‚è≥ M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t. Vui l√≤ng kh√¥ng chia s·∫ª v·ªõi b·∫•t k·ª≥ ai.\n\n" +
                "N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.\n\n" +
                "Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi t·∫°i DAS_Hotels! üåü\n\n" +
                "Tr√¢n tr·ªçng,\n" +
                "ƒê·ªôi ng≈© h·ªó tr·ª£ DAS_Hotels";

        emailService.sendEmail(email, subject, text);

        return ApiResponse.<String>builder()
                .code(HttpStatus.OK.value())
                .result("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email th√†nh c√¥ng!")
                .build();
    }

    @PostMapping("/verify")
    public ApiResponse<String> verifyOtp(@RequestParam String email,
                                       @RequestParam String otpInput) {
        String key = "OTP: " + email;
        boolean isValid = otpService.validateOtp(key, otpInput);
        if (isValid) {
            return ApiResponse.<String>builder()
                    .code(HttpStatus.OK.value())
                    .result("X√°c th·ª±c OTP th√†nh c√¥ng!")
                    .build();
        }
        return ApiResponse.<String>builder()
                .code(HttpStatus.BAD_REQUEST.value())
                .result("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!")
                .build();
    }

    @GetMapping("/get-ttl")
    public ApiResponse<String> getTTL(@RequestParam String email) {
        String key = "OTP: " + email;
        long ttl = otpService.getOtpTTL(key);
        return ApiResponse.<String>builder()
                .code(HttpStatus.OK.value())
                .result(Long.toString(ttl))
                .build();
    }
}
